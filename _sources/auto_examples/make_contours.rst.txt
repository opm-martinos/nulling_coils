
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/make_contours.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_make_contours.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_make_contours.py:


=====================
Design biplanar coils
=====================

Example demonstrating how to create biplanar coils for production.

.. GENERATED FROM PYTHON SOURCE LINES 8-30

.. code-block:: default


    # Authors: Mainak Jas <mjas@mgh.harvard.edu>
    #          Padma Sundaram <padma@nmr.mgh.harvard.edu>

    # First, we will import the necessary libraries
    from pathlib import Path

    import numpy as np
    import matplotlib.pyplot as plt

    from bfieldtools.utils import load_example_mesh
    import pyvista as pv

    import opm_coils
    from opm_coils import BiplanarCoil, get_sphere_points, get_target_field

    N_suh = 50
    N_contours = 30

    center = np.array([0, 0, 0])
    target_type = 'dc_y'  # 'gradient_x' | 'gradient_y' | 'dc_x' | 'dc_y' | 'dc_grad_x' etc.








.. GENERATED FROM PYTHON SOURCE LINES 31-33

Next we define the output directory containing the kicad files for our
PCB design. 

.. GENERATED FROM PYTHON SOURCE LINES 33-58

.. code-block:: default


    pcb_dir = Path(opm_coils.__path__[0]).parents[0]

    output_dir = {'dc_x': 'Bx_coil',
                  'dc_y': 'By_coil',
                  'dc_z': 'Bz_coil',
                  'gradient_x': 'Gx_coil',
                  'gradient_y': 'Gy_coil',
                  'gradient_z': 'Gz_coil'}
    header_type = {'dc_x': 'vert',
                   'dc_y': 'horz',
                   'dc_z': 'vert',
                   'gradient_x': 'vert',
                   'gradient_y': 'horz',
                   'gradient_z': 'vert'}
    bounds_wholeloop = {'dc_x': False,
                        'dc_y': True,
                        'dc_z': False, 
                        'gradient_x': False,
                        'gradient_y': True,
                        'gradient_z': False}

    pcb_fname = pcb_dir / 'development' / output_dir[target_type] / 'first' / 'coil_template_first.kicad_pcb'
    kicad_header = pcb_dir / 'kicad' / 'headers' / f'kicad_header_{header_type[target_type]}_first_half.txt'








.. GENERATED FROM PYTHON SOURCE LINES 59-60

Next we will define the parameters of our coils

.. GENERATED FROM PYTHON SOURCE LINES 60-64

.. code-block:: default


    trace_width = 5. # mm
    cu_oz = 2. # oz per ft^2








.. GENERATED FROM PYTHON SOURCE LINES 65-68

A 10 m x 10 m biplanar coil mesh is loaded from bfieldtools.
We will scale the mesh so as to achieve the dimensions of
1.4 m x 1.4 m that we will use in our work.

.. GENERATED FROM PYTHON SOURCE LINES 68-75

.. code-block:: default


    scaling_factor = 0.14
    standoff = scaling_factor * 10

    planemesh = load_example_mesh("10x10_plane_hires")
    planemesh.apply_scale(scaling_factor)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <trimesh.Trimesh(vertices.shape=(1592, 3), faces.shape=(3038, 3), name=`10x10_plane_hires.obj`)>



.. GENERATED FROM PYTHON SOURCE LINES 76-77

The BiplanarCoil class is instantiated

.. GENERATED FROM PYTHON SOURCE LINES 77-79

.. code-block:: default

    coil = BiplanarCoil(planemesh, center, N_suh=N_suh, standoff=standoff)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Calculating surface harmonics expansion...
    Computing the laplacian matrix...
    Computing the mass matrix...
    Calculating surface harmonics expansion...
    Computing the laplacian matrix...
    Computing the mass matrix...




.. GENERATED FROM PYTHON SOURCE LINES 80-81

Then the target points and the fields are used to fit the coil design

.. GENERATED FROM PYTHON SOURCE LINES 81-86

.. code-block:: default

    target_points, points_z = get_sphere_points(center, n=8, sidelength=0.5)
    target_field = get_target_field(target_type, target_points)

    coil.fit(target_points, target_field)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computing magnetic field coupling matrix, 3184 vertices by 160 target points... took 0.88 seconds.
    Computing the resistance matrix...
    Passing problem to solver...
    ===============================================================================
                                         CVXPY                                     
                                         v1.4.1                                    
    ===============================================================================
    (CVXPY) Nov 06 02:22:13 PM: Your problem has 100 variables, 2 constraints, and 0 parameters.
    (CVXPY) Nov 06 02:22:13 PM: It is compliant with the following grammars: DCP, DQCP
    (CVXPY) Nov 06 02:22:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
    (CVXPY) Nov 06 02:22:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
    (CVXPY) Nov 06 02:22:13 PM: Your problem is compiled with the CPP canonicalization backend.
    -------------------------------------------------------------------------------
                                      Compilation                                  
    -------------------------------------------------------------------------------
    (CVXPY) Nov 06 02:22:13 PM: Compiling problem (target solver=MOSEK).
    (CVXPY) Nov 06 02:22:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> MOSEK
    (CVXPY) Nov 06 02:22:13 PM: Applying reduction Dcp2Cone
    (CVXPY) Nov 06 02:22:13 PM: Applying reduction CvxAttr2Constr
    (CVXPY) Nov 06 02:22:13 PM: Applying reduction ConeMatrixStuffing
    (CVXPY) Nov 06 02:22:13 PM: Applying reduction MOSEK
    (CVXPY) Nov 06 02:22:13 PM: Finished problem compilation (took 1.001e-01 seconds).
    -------------------------------------------------------------------------------
                                    Numerical solver                               
    -------------------------------------------------------------------------------
    (CVXPY) Nov 06 02:22:13 PM: Invoking solver MOSEK  to obtain a solution.


    /Users/mainak/anaconda3/envs/bfieldtools/lib/python3.9/site-packages/cvxpy/reductions/solvers/conic_solvers/mosek_conif.py:663: UserWarning: 
    Using MOSEK constants to specify parameters is deprecated.
    Use generic string names instead.
    For example, replace mosek.iparam.num_threads with 'MSK_IPAR_NUM_THREADS'

      warnings.warn(__MSK_ENUM_PARAM_DEPRECATION__, UserWarning)
    (CVXPY) Nov 06 02:22:13 PM: Problem
    (CVXPY) Nov 06 02:22:13 PM:   Name                   :                 
    (CVXPY) Nov 06 02:22:13 PM:   Objective sense        : maximize        
    (CVXPY) Nov 06 02:22:13 PM:   Type                   : CONIC (conic optimization problem)
    (CVXPY) Nov 06 02:22:13 PM:   Constraints            : 101             
    (CVXPY) Nov 06 02:22:13 PM:   Affine conic cons.     : 0               
    (CVXPY) Nov 06 02:22:13 PM:   Disjunctive cons.      : 0               
    (CVXPY) Nov 06 02:22:13 PM:   Cones                  : 1               
    (CVXPY) Nov 06 02:22:13 PM:   Scalar variables       : 1062            
    (CVXPY) Nov 06 02:22:13 PM:   Matrix variables       : 0               
    (CVXPY) Nov 06 02:22:13 PM:   Integer variables      : 0               
    (CVXPY) Nov 06 02:22:13 PM: 
    (CVXPY) Nov 06 02:22:13 PM: Optimizer started.
    (CVXPY) Nov 06 02:22:13 PM: Presolve started.
    (CVXPY) Nov 06 02:22:13 PM: Linear dependency checker started.
    (CVXPY) Nov 06 02:22:13 PM: Linear dependency checker terminated.
    (CVXPY) Nov 06 02:22:13 PM: Eliminator started.
    (CVXPY) Nov 06 02:22:14 PM: Freed constraints in eliminator : 0
    (CVXPY) Nov 06 02:22:14 PM: Eliminator terminated.
    (CVXPY) Nov 06 02:22:14 PM: Eliminator - tries                  : 1                 time                   : 0.00            
    (CVXPY) Nov 06 02:22:14 PM: Lin. dep.  - tries                  : 1                 time                   : 0.00            
    (CVXPY) Nov 06 02:22:14 PM: Lin. dep.  - primal attempts        : 1                 successes              : 1               
    (CVXPY) Nov 06 02:22:14 PM: Lin. dep.  - dual attempts          : 0                 successes              : 0               
    (CVXPY) Nov 06 02:22:14 PM: Lin. dep.  - primal deps.           : 0                 dual deps.             : 0               
    (CVXPY) Nov 06 02:22:14 PM: Presolve terminated. Time: 0.02    
    (CVXPY) Nov 06 02:22:14 PM: Optimizer  - threads                : 8               
    (CVXPY) Nov 06 02:22:14 PM: Optimizer  - solved problem         : the primal      
    (CVXPY) Nov 06 02:22:14 PM: Optimizer  - Constraints            : 101             
    (CVXPY) Nov 06 02:22:14 PM: Optimizer  - Cones                  : 1               
    (CVXPY) Nov 06 02:22:14 PM: Optimizer  - Scalar variables       : 1062              conic                  : 102             
    (CVXPY) Nov 06 02:22:14 PM: Optimizer  - Semi-definite variables: 0                 scalarized             : 0               
    (CVXPY) Nov 06 02:22:14 PM: Factor     - setup time             : 0.01            
    (CVXPY) Nov 06 02:22:14 PM: Factor     - dense det. time        : 0.00              GP order time          : 0.00            
    (CVXPY) Nov 06 02:22:14 PM: Factor     - nonzeros before factor : 5151              after factor           : 5151            
    (CVXPY) Nov 06 02:22:14 PM: Factor     - dense dim.             : 0                 flops                  : 5.21e+06        
    (CVXPY) Nov 06 02:22:14 PM: ITE PFEAS    DFEAS    GFEAS    PRSTATUS   POBJ              DOBJ              MU       TIME  
    (CVXPY) Nov 06 02:22:14 PM: 0   1.0e+00  3.3e+01  2.0e+00  0.00e+00   -1.000000000e+00  -0.000000000e+00  1.0e+00  0.04  
    (CVXPY) Nov 06 02:22:14 PM: 1   6.2e-01  2.0e+01  1.2e+00  -3.67e-01  8.074102027e+00   8.717140478e+00   6.2e-01  0.04  
    (CVXPY) Nov 06 02:22:14 PM: 2   3.8e-01  1.3e+01  6.2e-01  -3.32e-01  3.854016341e+01   3.898638953e+01   3.8e-01  0.04  
    (CVXPY) Nov 06 02:22:14 PM: 3   3.6e-01  1.2e+01  5.7e-01  8.21e-01   5.206605879e+01   5.248526896e+01   3.6e-01  0.05  
    (CVXPY) Nov 06 02:22:14 PM: 4   1.7e-01  5.6e+00  1.6e-01  1.79e+00   1.066982891e+02   1.068317814e+02   1.7e-01  0.05  
    (CVXPY) Nov 06 02:22:14 PM: 5   3.1e-02  1.0e+00  3.1e-02  1.05e+00   1.501850630e+02   1.500705013e+02   3.1e-02  0.05  
    (CVXPY) Nov 06 02:22:14 PM: 6   1.3e-02  4.1e-01  1.2e-02  -2.45e-01  1.944314243e+02   1.942993967e+02   1.3e-02  0.06  
    (CVXPY) Nov 06 02:22:14 PM: 7   5.0e-03  1.6e-01  3.0e-03  4.10e-01   2.496052247e+02   2.495539387e+02   5.0e-03  0.06  
    (CVXPY) Nov 06 02:22:14 PM: 8   7.4e-04  2.4e-02  2.1e-04  8.56e-01   2.962092236e+02   2.961967180e+02   7.4e-04  0.06  
    (CVXPY) Nov 06 02:22:14 PM: 9   1.4e-04  4.6e-03  1.5e-05  9.24e-01   3.062824194e+02   3.062810007e+02   1.4e-04  0.06  
    (CVXPY) Nov 06 02:22:14 PM: 10  2.3e-05  7.7e-04  1.1e-06  9.68e-01   3.083219504e+02   3.083216445e+02   2.3e-05  0.07  
    (CVXPY) Nov 06 02:22:14 PM: 11  1.7e-08  5.4e-07  2.1e-11  9.99e-01   3.087298312e+02   3.087298310e+02   1.7e-08  0.08  
    (CVXPY) Nov 06 02:22:14 PM: 12  8.3e-09  2.7e-07  8.0e-12  1.00e+00   3.087299873e+02   3.087299872e+02   8.3e-09  0.09  
    (CVXPY) Nov 06 02:22:14 PM: 13  4.1e-09  1.4e-07  3.0e-12  1.00e+00   3.087300653e+02   3.087300653e+02   4.1e-09  0.09  
    (CVXPY) Nov 06 02:22:14 PM: 14  2.1e-09  7.7e-08  7.3e-13  1.00e+00   3.087301044e+02   3.087301044e+02   2.1e-09  0.10  
    (CVXPY) Nov 06 02:22:14 PM: Optimizer terminated. Time: 0.11    
    (CVXPY) Nov 06 02:22:14 PM: 
    (CVXPY) Nov 06 02:22:14 PM: 
    (CVXPY) Nov 06 02:22:14 PM: Interior-point solution summary
    (CVXPY) Nov 06 02:22:14 PM:   Problem status  : PRIMAL_AND_DUAL_FEASIBLE
    (CVXPY) Nov 06 02:22:14 PM:   Solution status : OPTIMAL
    (CVXPY) Nov 06 02:22:14 PM:   Primal.  obj: 3.0873010438e+02    nrm: 1e+03    Viol.  con: 5e-09    var: 0e+00    cones: 0e+00  
    (CVXPY) Nov 06 02:22:14 PM:   Dual.    obj: 3.0873010435e+02    nrm: 6e+02    Viol.  con: 0e+00    var: 1e-08    cones: 0e+00  
    -------------------------------------------------------------------------------
                                        Summary                                    
    -------------------------------------------------------------------------------
    (CVXPY) Nov 06 02:22:14 PM: Problem status: optimal
    (CVXPY) Nov 06 02:22:14 PM: Optimal value: 3.087e+02
    (CVXPY) Nov 06 02:22:14 PM: Compilation took 1.001e-01 seconds
    (CVXPY) Nov 06 02:22:14 PM: Solver (including time spent in interface) took 1.690e-01 seconds




.. GENERATED FROM PYTHON SOURCE LINES 87-88

We discretize the optimized stream function

.. GENERATED FROM PYTHON SOURCE LINES 88-90

.. code-block:: default

    coil.discretize(N_contours=N_contours, trace_width=trace_width, cu_oz=cu_oz)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Processing contour, value: -9955701.058550244
    Processing contour, value: -9268941.915053057
    Processing contour, value: -8582182.771555869
    Processing contour, value: -7895423.628058681
    Processing contour, value: -7208664.484561494
    Processing contour, value: -6521905.341064306
    Processing contour, value: -5835146.197567117
    Processing contour, value: -5148387.05406993
    Processing contour, value: -4461627.910572742
    Processing contour, value: -3774868.7670755545
    Processing contour, value: -3088109.623578367
    Processing contour, value: -2401350.480081179
    Processing contour, value: -1714591.3365839906
    Processing contour, value: -1027832.193086803
    Processing contour, value: -341073.0495896153
    Processing contour, value: 345686.0939075723
    Processing contour, value: 1032445.23740476
    Processing contour, value: 1719204.3809019476
    Processing contour, value: 2405963.5243991353
    Processing contour, value: 3092722.667896323
    Processing contour, value: 3779481.8113935106
    Processing contour, value: 4466240.954890698
    Processing contour, value: 5153000.098387886
    Processing contour, value: 5839759.2418850735
    Processing contour, value: 6526518.385382261
    Processing contour, value: 7213277.528879449
    Processing contour, value: 7900036.672376636
    Processing contour, value: 8586795.815873824
    Processing contour, value: 9273554.959371012
    Processing contour, value: 9960314.1028682




.. GENERATED FROM PYTHON SOURCE LINES 91-93

We plot both the optimized continuous stream function and it's discretized
counterpart. The camera position is 'xy' for optimal viewing

.. GENERATED FROM PYTHON SOURCE LINES 93-101

.. code-block:: default

    plotter = pv.Plotter(window_size=(1500, 1700))
    coil.coil_.s.plot(figure=plotter)
    plotter.camera_position = 'xy'

    coil.loops_ = [loop for loop in coil.loops_ if loop[0, 2] > 0]  # just one coil
    plotter = coil.plot_field(target_points)
    plotter.camera_position = 'xy'




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_make_contours_001.png
          :alt: make contours
          :srcset: /auto_examples/images/sphx_glr_make_contours_001.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_make_contours_002.png
          :alt: make contours
          :srcset: /auto_examples/images/sphx_glr_make_contours_002.png
          :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 102-103

We can evaluate the coil for metrics such as efficiency

.. GENERATED FROM PYTHON SOURCE LINES 103-107

.. code-block:: default

    metrics = coil.evaluate(target_type, target_points, target_field,
                            points_z, 'all')
    print(metrics)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computing the inductance matrix...
    Computing self-inductance matrix using rough quadrature (degree=2).              For higher accuracy, set quad_degree to 4 or more.
    Estimating 34964 MiB required for 3184 by 3184 vertices...
    Computing inductance matrix in 120 chunks (5981 MiB memory free),              when approx_far=True using more chunks is faster...
    Computing triangle-coupling matrix
    Inductance matrix computation took 56.11 seconds.
    {'efficiency (nT/mA)': 1.4441397313193216, 'error': 1.4441397313193216, 'homogeneity (%)': 100.0, 'inductance (uH)': 4419.038399913502, 'resistance (ohm)': 10.530859716758112, 'length (m)': 214.2907500503104, 'target radius (cm)': 17.857142857142854}




.. GENERATED FROM PYTHON SOURCE LINES 108-109

Next, we make cuts using the interactive interface

.. GENERATED FROM PYTHON SOURCE LINES 111-112

coil.make_cuts()

.. GENERATED FROM PYTHON SOURCE LINES 112-115

.. code-block:: default

    coil.save(pcb_fname=pcb_fname, kicad_header_fname=kicad_header,
              bounds=(0,750,0,1500), origin= (0, 750),
              bounds_wholeloop=bounds_wholeloop[target_type])




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    export to kicad /Users/mainak/Desktop/cmeg_coil_design/development/By_coil/first/coil_template_first.kicad_pcb: 

    done






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 11.589 seconds)


.. _sphx_glr_download_auto_examples_make_contours.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: make_contours.py <make_contours.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: make_contours.ipynb <make_contours.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
