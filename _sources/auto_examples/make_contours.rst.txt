
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/make_contours.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_make_contours.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_make_contours.py:


=====================
Design biplanar coils
=====================

Example demonstrating how to create biplanar coils for production.

.. GENERATED FROM PYTHON SOURCE LINES 8-30

.. code-block:: default


    # Authors: Mainak Jas <mjas@mgh.harvard.edu>
    #          Padma Sundaram <padma@nmr.mgh.harvard.edu>

    # First, we will import the necessary libraries
    from pathlib import Path

    import numpy as np
    import matplotlib.pyplot as plt

    from bfieldtools.utils import load_example_mesh

    import opm_coils
    from opm_coils import BiplanarCoil, get_sphere_points, get_target_field
    from opm_coils.shielding import shielded_room

    N_suh = 50
    N_contours = 30

    center = np.array([0, 0, 0])
    target_type = 'dc_y'  # 'gradient_x' | 'gradient_y' | 'dc_x' | 'dc_y' | 'dc_grad_x' etc.








.. GENERATED FROM PYTHON SOURCE LINES 31-33

Next we define the output directory containing the kicad files for our
PCB design. 

.. GENERATED FROM PYTHON SOURCE LINES 33-55

.. code-block:: default


    pcb_dir = Path(opm_coils.__path__[0]).parents[0]

    output_dir = {'dc_x': 'Bx_coil',
                  'dc_y': 'By_coil',
                  'dc_z': 'Bz_coil',
                  'gradient_x': 'Gx_coil',
                  'gradient_y': 'Gy_coil',
                  'gradient_z': 'Gz_coil'}
    header_type = {'dc_x': 'vert',
                   'dc_y': 'horz',
                   'dc_z': 'vert',
                   'gradient_x': 'vert',
                   'gradient_y': 'horz',
                   'gradient_z': 'vert'}
    bounds_wholeloop = {'dc_x': False,
                        'dc_y': True,
                        'dc_z': False, 
                        'gradient_x': False,
                        'gradient_y': True,
                        'gradient_z': False}








.. GENERATED FROM PYTHON SOURCE LINES 56-57

Next we will define the parameters of our coils

.. GENERATED FROM PYTHON SOURCE LINES 57-69

.. code-block:: default


    standoffs = {"dc_y": 0.1400, "gradient_y": 0.1408,
                 "dc_x": 0.1416, "gradient_x": 0.1424, 
                 "dc_z": 0.1432, "gradient_z": 0.1440}

    scaling = {"dc_y": 0.1400, "gradient_y": 0.1420,
               "dc_x": 0.1420, "gradient_x": 0.1436, 
               "dc_z": 0.1441, "gradient_z": 0.14565}

    trace_width = 5. # mm
    cu_oz = 2. # oz per ft^2








.. GENERATED FROM PYTHON SOURCE LINES 70-73

A 10 m x 10 m biplanar coil mesh is loaded from bfieldtools.
We will scale the mesh so as to achieve the dimensions of
1.4 m x 1.4 m that we will use in our work.

.. GENERATED FROM PYTHON SOURCE LINES 73-80

.. code-block:: default


    scaling_factor = scaling[target_type]
    standoff = scaling_factor * 10

    planemesh = load_example_mesh("10x10_plane_hires")
    planemesh.apply_scale(scaling_factor)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <trimesh.Trimesh(vertices.shape=(1592, 3), faces.shape=(3038, 3), name=`10x10_plane_hires.obj`)>



.. GENERATED FROM PYTHON SOURCE LINES 81-82

The BiplanarCoil class is instantiated

.. GENERATED FROM PYTHON SOURCE LINES 82-84

.. code-block:: default

    coil = BiplanarCoil(planemesh, center, N_suh=N_suh, standoff=standoff)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Calculating surface harmonics expansion...
    Computing the laplacian matrix...
    Computing the mass matrix...
    Calculating surface harmonics expansion...
    Computing the laplacian matrix...
    Computing the mass matrix...




.. GENERATED FROM PYTHON SOURCE LINES 85-86

Then the target points and the fields are used to fit the coil design

.. GENERATED FROM PYTHON SOURCE LINES 86-93

.. code-block:: default

    target_points, points_z = get_sphere_points(center, n=8, sidelength=0.5)
    target_field = get_target_field(target_type, target_points)

    coil.fit(target_points, target_field)

    coil.discretize(N_contours=N_contours, trace_width=trace_width, cu_oz=cu_oz)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computing magnetic field coupling matrix, 3184 vertices by 160 target points... took 0.38 seconds.
    Computing the resistance matrix...
    Passing problem to solver...
    ===============================================================================
                                         CVXPY                                     
                                         v1.4.1                                    
    ===============================================================================
    (CVXPY) Jan 08 12:13:21 PM: Your problem has 100 variables, 2 constraints, and 0 parameters.
    (CVXPY) Jan 08 12:13:21 PM: It is compliant with the following grammars: DCP, DQCP
    (CVXPY) Jan 08 12:13:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
    (CVXPY) Jan 08 12:13:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
    (CVXPY) Jan 08 12:13:21 PM: Your problem is compiled with the CPP canonicalization backend.
    -------------------------------------------------------------------------------
                                      Compilation                                  
    -------------------------------------------------------------------------------
    (CVXPY) Jan 08 12:13:21 PM: Compiling problem (target solver=MOSEK).
    (CVXPY) Jan 08 12:13:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> MOSEK
    (CVXPY) Jan 08 12:13:21 PM: Applying reduction Dcp2Cone
    (CVXPY) Jan 08 12:13:21 PM: Applying reduction CvxAttr2Constr
    (CVXPY) Jan 08 12:13:21 PM: Applying reduction ConeMatrixStuffing
    (CVXPY) Jan 08 12:13:21 PM: Applying reduction MOSEK
    (CVXPY) Jan 08 12:13:21 PM: Finished problem compilation (took 4.362e-02 seconds).
    -------------------------------------------------------------------------------
                                    Numerical solver                               
    -------------------------------------------------------------------------------
    (CVXPY) Jan 08 12:13:21 PM: Invoking solver MOSEK  to obtain a solution.


    /Users/mainak/anaconda3/envs/bfieldtools/lib/python3.9/site-packages/cvxpy/reductions/solvers/conic_solvers/mosek_conif.py:663: UserWarning: 
    Using MOSEK constants to specify parameters is deprecated.
    Use generic string names instead.
    For example, replace mosek.iparam.num_threads with 'MSK_IPAR_NUM_THREADS'

      warnings.warn(__MSK_ENUM_PARAM_DEPRECATION__, UserWarning)
    (CVXPY) Jan 08 12:13:21 PM: Problem
    (CVXPY) Jan 08 12:13:21 PM:   Name                   :                 
    (CVXPY) Jan 08 12:13:21 PM:   Objective sense        : maximize        
    (CVXPY) Jan 08 12:13:21 PM:   Type                   : CONIC (conic optimization problem)
    (CVXPY) Jan 08 12:13:21 PM:   Constraints            : 101             
    (CVXPY) Jan 08 12:13:21 PM:   Affine conic cons.     : 0               
    (CVXPY) Jan 08 12:13:21 PM:   Disjunctive cons.      : 0               
    (CVXPY) Jan 08 12:13:21 PM:   Cones                  : 1               
    (CVXPY) Jan 08 12:13:21 PM:   Scalar variables       : 1062            
    (CVXPY) Jan 08 12:13:21 PM:   Matrix variables       : 0               
    (CVXPY) Jan 08 12:13:21 PM:   Integer variables      : 0               
    (CVXPY) Jan 08 12:13:21 PM: 
    (CVXPY) Jan 08 12:13:21 PM: Optimizer started.
    (CVXPY) Jan 08 12:13:21 PM: Presolve started.
    (CVXPY) Jan 08 12:13:21 PM: Linear dependency checker started.
    (CVXPY) Jan 08 12:13:21 PM: Linear dependency checker terminated.
    (CVXPY) Jan 08 12:13:21 PM: Eliminator started.
    (CVXPY) Jan 08 12:13:21 PM: Freed constraints in eliminator : 0
    (CVXPY) Jan 08 12:13:21 PM: Eliminator terminated.
    (CVXPY) Jan 08 12:13:21 PM: Eliminator - tries                  : 1                 time                   : 0.00            
    (CVXPY) Jan 08 12:13:21 PM: Lin. dep.  - tries                  : 1                 time                   : 0.00            
    (CVXPY) Jan 08 12:13:21 PM: Lin. dep.  - primal attempts        : 1                 successes              : 1               
    (CVXPY) Jan 08 12:13:21 PM: Lin. dep.  - dual attempts          : 0                 successes              : 0               
    (CVXPY) Jan 08 12:13:21 PM: Lin. dep.  - primal deps.           : 0                 dual deps.             : 0               
    (CVXPY) Jan 08 12:13:21 PM: Presolve terminated. Time: 0.02    
    (CVXPY) Jan 08 12:13:21 PM: Optimizer  - threads                : 8               
    (CVXPY) Jan 08 12:13:21 PM: Optimizer  - solved problem         : the primal      
    (CVXPY) Jan 08 12:13:21 PM: Optimizer  - Constraints            : 101             
    (CVXPY) Jan 08 12:13:21 PM: Optimizer  - Cones                  : 1               
    (CVXPY) Jan 08 12:13:21 PM: Optimizer  - Scalar variables       : 1062              conic                  : 102             
    (CVXPY) Jan 08 12:13:21 PM: Optimizer  - Semi-definite variables: 0                 scalarized             : 0               
    (CVXPY) Jan 08 12:13:21 PM: Factor     - setup time             : 0.01            
    (CVXPY) Jan 08 12:13:21 PM: Factor     - dense det. time        : 0.00              GP order time          : 0.00            
    (CVXPY) Jan 08 12:13:21 PM: Factor     - nonzeros before factor : 5151              after factor           : 5151            
    (CVXPY) Jan 08 12:13:21 PM: Factor     - dense dim.             : 0                 flops                  : 5.21e+06        
    (CVXPY) Jan 08 12:13:21 PM: ITE PFEAS    DFEAS    GFEAS    PRSTATUS   POBJ              DOBJ              MU       TIME  
    (CVXPY) Jan 08 12:13:21 PM: 0   1.0e+00  3.3e+01  2.0e+00  0.00e+00   -1.000000000e+00  -0.000000000e+00  1.0e+00  0.04  
    (CVXPY) Jan 08 12:13:21 PM: 1   6.2e-01  2.0e+01  1.2e+00  -3.67e-01  8.074102027e+00   8.717140478e+00   6.2e-01  0.05  
    (CVXPY) Jan 08 12:13:21 PM: 2   3.8e-01  1.3e+01  6.2e-01  -3.32e-01  3.854016341e+01   3.898638953e+01   3.8e-01  0.05  
    (CVXPY) Jan 08 12:13:21 PM: 3   3.6e-01  1.2e+01  5.7e-01  8.21e-01   5.206605879e+01   5.248526896e+01   3.6e-01  0.05  
    (CVXPY) Jan 08 12:13:22 PM: 4   1.7e-01  5.6e+00  1.6e-01  1.79e+00   1.066982891e+02   1.068317814e+02   1.7e-01  0.05  
    (CVXPY) Jan 08 12:13:22 PM: 5   3.1e-02  1.0e+00  3.1e-02  1.05e+00   1.501850630e+02   1.500705013e+02   3.1e-02  0.05  
    (CVXPY) Jan 08 12:13:22 PM: 6   1.3e-02  4.1e-01  1.2e-02  -2.45e-01  1.944314242e+02   1.942993967e+02   1.3e-02  0.06  
    (CVXPY) Jan 08 12:13:22 PM: 7   5.0e-03  1.6e-01  3.0e-03  4.10e-01   2.496052248e+02   2.495539387e+02   5.0e-03  0.06  
    (CVXPY) Jan 08 12:13:22 PM: 8   7.4e-04  2.4e-02  2.1e-04  8.56e-01   2.962092237e+02   2.961967180e+02   7.4e-04  0.06  
    (CVXPY) Jan 08 12:13:22 PM: 9   1.4e-04  4.6e-03  1.5e-05  9.24e-01   3.062824194e+02   3.062810007e+02   1.4e-04  0.06  
    (CVXPY) Jan 08 12:13:22 PM: 10  2.3e-05  7.7e-04  1.1e-06  9.68e-01   3.083219504e+02   3.083216445e+02   2.3e-05  0.06  
    (CVXPY) Jan 08 12:13:22 PM: 11  1.7e-08  5.4e-07  2.0e-11  9.99e-01   3.087298312e+02   3.087298310e+02   1.7e-08  0.07  
    (CVXPY) Jan 08 12:13:22 PM: 12  6.4e-10  3.7e-09  3.9e-13  1.00e+00   3.087301435e+02   3.087301433e+02   4.3e-12  0.07  
    (CVXPY) Jan 08 12:13:22 PM: Optimizer terminated. Time: 0.08    
    (CVXPY) Jan 08 12:13:22 PM: 
    (CVXPY) Jan 08 12:13:22 PM: 
    (CVXPY) Jan 08 12:13:22 PM: Interior-point solution summary
    (CVXPY) Jan 08 12:13:22 PM:   Problem status  : PRIMAL_AND_DUAL_FEASIBLE
    (CVXPY) Jan 08 12:13:22 PM:   Solution status : OPTIMAL
    (CVXPY) Jan 08 12:13:22 PM:   Primal.  obj: 3.0873014354e+02    nrm: 1e+03    Viol.  con: 4e-09    var: 0e+00    cones: 0e+00  
    (CVXPY) Jan 08 12:13:22 PM:   Dual.    obj: 3.0873014335e+02    nrm: 6e+02    Viol.  con: 0e+00    var: 2e-08    cones: 0e+00  
    -------------------------------------------------------------------------------
                                        Summary                                    
    -------------------------------------------------------------------------------
    (CVXPY) Jan 08 12:13:22 PM: Problem status: optimal
    (CVXPY) Jan 08 12:13:22 PM: Optimal value: 3.087e+02
    (CVXPY) Jan 08 12:13:22 PM: Compilation took 4.362e-02 seconds
    (CVXPY) Jan 08 12:13:22 PM: Solver (including time spent in interface) took 1.298e-01 seconds
    Processing contour, value: -9955702.158503016
    Processing contour, value: -9268942.937399967
    Processing contour, value: -8582183.716296915
    Processing contour, value: -7895424.495193865
    Processing contour, value: -7208665.274090815
    Processing contour, value: -6521906.052987765
    Processing contour, value: -5835146.831884715
    Processing contour, value: -5148387.610781664
    Processing contour, value: -4461628.389678614
    Processing contour, value: -3774869.1685755635
    Processing contour, value: -3088109.9474725137
    Processing contour, value: -2401350.726369463
    Processing contour, value: -1714591.505266413
    Processing contour, value: -1027832.2841633633
    Processing contour, value: -341073.0630603116
    Processing contour, value: 345686.1580427382
    Processing contour, value: 1032445.379145788
    Processing contour, value: 1719204.6002488378
    Processing contour, value: 2405963.8213518895
    Processing contour, value: 3092723.0424549393
    Processing contour, value: 3779482.263557989
    Processing contour, value: 4466241.484661039
    Processing contour, value: 5153000.705764091
    Processing contour, value: 5839759.92686714
    Processing contour, value: 6526519.14797019
    Processing contour, value: 7213278.36907324
    Processing contour, value: 7900037.59017629
    Processing contour, value: 8586796.81127934
    Processing contour, value: 9273556.032382393
    Processing contour, value: 9960315.253485443




.. GENERATED FROM PYTHON SOURCE LINES 94-97

To evaluate the effect of the shielded room, we can add it to the coil
specification and it will be taken into account for estimating the
magnetic field at any point

.. GENERATED FROM PYTHON SOURCE LINES 97-103

.. code-block:: default

    room_dims = (4, 2.3, 3.)
    coil_pos = (1.89, 1.05, 1.6)
    shield_mesh = shielded_room(room_dims=room_dims,
                                coil_pos=coil_pos)
    coil.add_shield(shield_mesh)








.. GENERATED FROM PYTHON SOURCE LINES 104-105

The field at some target points can be computed by doing

.. GENERATED FROM PYTHON SOURCE LINES 105-107

.. code-block:: default

    B_target = coil.predict(target_points)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computing effect of shielded room
    Computing magnetic field coupling matrix, 4056 vertices by 160 target points... took 0.44 seconds.
    Computing scalar potential coupling matrix, 4056 vertices by 4056 target points... took 16.43 seconds.
    Computing scalar potential coupling matrix, 3184 vertices by 4056 target points... took 12.41 seconds.
    Done




.. GENERATED FROM PYTHON SOURCE LINES 108-109

The field can be computed and plotted by doing

.. GENERATED FROM PYTHON SOURCE LINES 109-111

.. code-block:: default

    plotter = coil.plot_field(target_points)




.. image-sg:: /auto_examples/images/sphx_glr_make_contours_001.png
   :alt: make contours
   :srcset: /auto_examples/images/sphx_glr_make_contours_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computing effect of shielded room
    Computing magnetic field coupling matrix, 4056 vertices by 160 target points... took 0.52 seconds.
    Computing scalar potential coupling matrix, 4056 vertices by 4056 target points... took 16.44 seconds.
    Done




.. GENERATED FROM PYTHON SOURCE LINES 112-114

We can evaluate the coil for metrics such as efficiency
and also compute its dimensions by doing

.. GENERATED FROM PYTHON SOURCE LINES 114-119

.. code-block:: default

    metrics = coil.evaluate(target_type, target_points, target_field,
                            points_z, 'all')
    print(metrics)
    print(f'The coil has dimensions {coil.shape} m')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computing magnetic field coupling matrix, 3184 vertices by 8 target points... took 0.03 seconds.
    Computing effect of shielded room
    Computing magnetic field coupling matrix, 4056 vertices by 160 target points... took 0.37 seconds.
    Computing scalar potential coupling matrix, 4056 vertices by 4056 target points... took 16.14 seconds.
    Done
    Computing effect of shielded room
    Computing magnetic field coupling matrix, 4056 vertices by 8 target points... took 0.03 seconds.
    Computing scalar potential coupling matrix, 4056 vertices by 4056 target points... took 16.80 seconds.
    Done
    Computing effect of shielded room
    Computing magnetic field coupling matrix, 4056 vertices by 160 target points... took 0.36 seconds.
    Computing scalar potential coupling matrix, 4056 vertices by 4056 target points... took 15.14 seconds.
    Done
    Computing effect of shielded room
    Computing magnetic field coupling matrix, 4056 vertices by 160 target points... took 0.37 seconds.
    Computing scalar potential coupling matrix, 4056 vertices by 4056 target points... took 15.65 seconds.
    Done
    Computing the inductance matrix...
    Computing self-inductance matrix using rough quadrature (degree=2).              For higher accuracy, set quad_degree to 4 or more.
    Estimating 34964 MiB required for 3184 by 3184 vertices...
    Computing inductance matrix in 1680 chunks (420 MiB memory free),              when approx_far=True using more chunks is faster...
    Computing triangle-coupling matrix
    Inductance matrix computation took 18.51 seconds.
    {'efficiency (nT/mA)': 1.3180748522426944, 'error': 1.3180748522426944, 'homogeneity (%)': 0.0, 'inductance (uH)': 17671.731783191775, 'resistance (ohm)': 10.530855709785541, 'length (m)': 214.2906685130779, 'target radius (cm)': 17.857142857142854}
    The coil has dimensions (1.3961729358002248, 1.398193800411589) m




.. GENERATED FROM PYTHON SOURCE LINES 120-123

We can now interactively create paths to join the loops in the discretized coils
by making "cuts". Uncomment below to use it.
coil.make_cuts()

.. GENERATED FROM PYTHON SOURCE LINES 125-126

Finally, we can export the files to KiCad

.. GENERATED FROM PYTHON SOURCE LINES 126-142

.. code-block:: default

    kicad_dir = Path(opm_coils.__path__[0]) / '..' / 'kicad' / 'headers'
    pcb_dir = Path(opm_coils.__path__[0]) / '..' / 'development'
    if header_type[target_type] == 'vert':
        coil.save(pcb_fname=pcb_dir / f'{output_dir[target_type]}/first/coil_template_first.kicad_pcb',
            kicad_header_fname=kicad_dir / f'/kicad_header_{header_type[target_type]}_first_half.txt',
            bounds=(0,750,0,1500), origin= (0, 750), bounds_wholeloop=bounds_wholeloop[target_type])
        coil.save(pcb_fname=pcb_dir / f'{output_dir[target_type]}/second/coil_template_second.kicad_pcb',
            kicad_header_fname=kicad_dir / f'kicad_header_{header_type[target_type]}_second_half.txt',
            bounds=(-750, 750, 0, 1500 ), origin=(750,750), bounds_wholeloop=bounds_wholeloop[target_type])
    else:
        coil.save(pcb_fname=pcb_dir / f'{output_dir[target_type]}/first/coil_template_first.kicad_pcb',
            kicad_header_fname=kicad_dir / f'kicad_header_{header_type[target_type]}_first_half.txt',
            bounds=(-750, 750, 0, 750), origin= (750, 0))
        coil.save(pcb_fname=pcb_dir / f'{output_dir[target_type]}/second/coil_template_second.kicad_pcb',
            kicad_header_fname=kicad_dir / f'kicad_header_{header_type[target_type]}_second_half.txt',
            bounds=(-750, 750, -750, 0), origin=(750, 750))




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    export to kicad /Users/mainak/Desktop/github_repos/cmeg_coil_design/opm_coils/../development/By_coil/first/coil_template_first.kicad_pcb: 

    done

    export to kicad /Users/mainak/Desktop/github_repos/cmeg_coil_design/opm_coils/../development/By_coil/second/coil_template_second.kicad_pcb: 

    done






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (2 minutes 25.408 seconds)


.. _sphx_glr_download_auto_examples_make_contours.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: make_contours.py <make_contours.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: make_contours.ipynb <make_contours.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
